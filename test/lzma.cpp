#include <decoco/decoco.hpp>
#include <catch/catch.hpp>

static std::vector<uint8_t> hello = { 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x0a };

static std::vector<uint8_t> helloLzma = { 0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00, 0x00, 0x04, 0xe6, 0xd6, 0xb4, 0x46, 0x02, 0x00, 0x21, 0x01, 0x16, 0x00, 0x00, 0x00, 0x74, 0x2f, 0xe5, 0xa3, 0x01, 0x00, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x0a, 0x00, 0x00, 0x00, 0xa5, 0x60, 0x97, 0xf1, 0x94, 0xf6, 0xfd, 0xe0, 0x00, 0x01, 0x1e, 0x06, 0xc1, 0x2f, 0xa4, 0x1d, 0x1f, 0xb6, 0xf3, 0x7d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x59, 0x5a };

TEST_CASE("Basic roundtrip lzma") {
  auto compressor = Decoco::LzmaCompressor();
  auto lzmaData = compressor->compress(hello);
  auto end = compressor->flush();
  lzmaData.insert(lzmaData.end(), end.begin(), end.end());
  REQUIRE(lzmaData == helloLzma);
  auto decompressor = Decoco::LzmaDecompressor();
  auto plainData = decompressor->decompress(lzmaData);
  REQUIRE(plainData == hello);
}

TEST_CASE("Basic lzma of hello") {
  auto decompressor = Decoco::LzmaDecompressor();
  auto unzippedData = decompressor->decompress(helloLzma);
  REQUIRE(unzippedData == hello);
}


